#!/usr/bin/env python3
"""
Initialize Phase 1 Core System Enhancements
- System Interface
- Ranking System  
- Achievement System
- Enhanced Skill Trees
"""

import asyncio
import sys
import os

# Add the current directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def initialize_all_systems():
    """Initialize all Phase 1 systems"""
    print("üöÄ INITIALIZING PHASE 1: CORE SYSTEM ENHANCEMENTS")
    print("=" * 60)
    
    try:
        # Initialize Ranking System
        print("üèÜ Initializing Hunter Ranking System...")
        from structure.ranking_system import RankingSystem
        await RankingSystem.initialize()
        print("‚úÖ Ranking System initialized successfully!")
        
        # Initialize Achievement System
        print("üèÖ Initializing Achievement System...")
        from structure.achievement_system import AchievementSystem
        await AchievementSystem.initialize()
        print("‚úÖ Achievement System initialized successfully!")
        
        # Initialize Skill Tree System
        print("üåü Initializing Enhanced Skill Tree System...")
        from structure.skill_tree_system import SkillTreeSystem
        await SkillTreeSystem.initialize()
        print("‚úÖ Skill Tree System initialized successfully!")
        
        print("\nüéâ ALL PHASE 1 SYSTEMS INITIALIZED SUCCESSFULLY!")
        print("=" * 60)
        
        # Display system overview
        print("üì± **SYSTEM INTERFACE** - Sung Jin-Woo style notifications")
        print("   ‚Ä¢ Level-up notifications with System styling")
        print("   ‚Ä¢ Rank-up celebrations")
        print("   ‚Ä¢ Achievement unlock alerts")
        print("   ‚Ä¢ Daily quest assignments")
        print("   ‚Ä¢ Emergency quest notifications")
        
        print("\nüèÜ **RANKING SYSTEM** - E-S Rank Hunter progression")
        print("   ‚Ä¢ E, D, C, B, A, S, National Level rankings")
        print("   ‚Ä¢ Automatic rank evaluation based on level, stats, achievements")
        print("   ‚Ä¢ Rank-specific benefits and content access")
        print("   ‚Ä¢ Hunter leaderboards")
        
        print("\nüèÖ **ACHIEVEMENT SYSTEM** - Comprehensive accomplishment tracking")
        print("   ‚Ä¢ Combat, Progression, Collection, Social, Exploration, Special categories")
        print("   ‚Ä¢ Automatic unlock detection")
        print("   ‚Ä¢ Rarity-based rewards (Common to Mythic)")
        print("   ‚Ä¢ Hidden achievements for special accomplishments")
        
        print("\nüåü **ENHANCED SKILL TREES** - Six specialized paths")
        print("   ‚Ä¢ Shadow Monarch - Command darkness and undead")
        print("   ‚Ä¢ Warrior - Master of weapons and physical combat")
        print("   ‚Ä¢ Mage - Harness elemental forces and arcane power")
        print("   ‚Ä¢ Assassin - Strike from shadows with precision")
        print("   ‚Ä¢ Tank - Protect allies and endure assaults")
        print("   ‚Ä¢ Support - Heal and aid allies in battle")
        
        print("\nüéÆ **AVAILABLE COMMANDS:**")
        print("   ‚Ä¢ `sl system` - Access main System interface")
        print("   ‚Ä¢ `sl rank [user]` - View hunter rank and progression")
        print("   ‚Ä¢ `sl achievements [category]` - View achievements")
        print("   ‚Ä¢ `sl skilltree [tree]` - Access skill trees")
        
        print("\nüîß **INTEGRATION COMPLETE:**")
        print("   ‚Ä¢ Level-ups now trigger System notifications")
        print("   ‚Ä¢ Automatic rank evaluation on level/stat changes")
        print("   ‚Ä¢ Achievement progress tracked automatically")
        print("   ‚Ä¢ Skill trees ready for player progression")
        
        print("\nüåü **SOLO LEVELING EXPERIENCE ENHANCED:**")
        print("   ‚Ä¢ Authentic System interface like Sung Jin-Woo")
        print("   ‚Ä¢ Hunter Association ranking system")
        print("   ‚Ä¢ Comprehensive achievement tracking")
        print("   ‚Ä¢ Multiple character build paths")
        print("   ‚Ä¢ Immersive progression notifications")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during initialization: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_system_integration():
    """Test that all systems work together"""
    print("\nüß™ TESTING SYSTEM INTEGRATION...")
    print("-" * 40)
    
    try:
        # Test System Interface
        print("üì± Testing System Interface...")
        from structure.system_interface import SystemInterface
        test_embed = SystemInterface.create_system_embed("TEST", "System interface working!")
        print("‚úÖ System Interface: OK")
        
        # Test Ranking System
        print("üèÜ Testing Ranking System...")
        from structure.ranking_system import RankingSystem, HunterRank
        test_rank = RankingSystem.get_rank_info(HunterRank.E)
        print("‚úÖ Ranking System: OK")
        
        # Test Achievement System
        print("üèÖ Testing Achievement System...")
        from structure.achievement_system import AchievementSystem
        test_achievement = AchievementSystem.get_achievement_by_id("first_steps")
        print("‚úÖ Achievement System: OK")
        
        # Test Skill Tree System
        print("üåü Testing Skill Tree System...")
        from structure.skill_tree_system import SkillTreeSystem, SkillTreeType
        test_tree = SkillTreeSystem.get_tree_by_type(SkillTreeType.SHADOW_MONARCH)
        print("‚úÖ Skill Tree System: OK")
        
        print("\n‚úÖ ALL SYSTEMS INTEGRATION TEST PASSED!")
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False

async def display_next_steps():
    """Display what to do next"""
    print("\nüéØ NEXT STEPS:")
    print("-" * 40)
    print("1. **Load the bot** - The new systems are ready to use")
    print("2. **Test commands** - Try `sl system`, `sl rank`, `sl achievements`")
    print("3. **Level up players** - Watch the new System notifications")
    print("4. **Check rankings** - Players will be automatically ranked")
    print("5. **Explore skill trees** - Six different character paths available")
    
    print("\nüöÄ **PHASE 2 READY FOR IMPLEMENTATION:**")
    print("   ‚Ä¢ Instant Dungeons - Personal training dungeons")
    print("   ‚Ä¢ Mana Crystal System - Resource economy")
    print("   ‚Ä¢ Enhanced Raids - Improved party mechanics")
    print("   ‚Ä¢ Gate System Overhaul - More immersive gates")
    
    print("\nüåü **YOUR SOLO LEVELING BOT IS NOW ENHANCED!**")
    print("Players will experience authentic System notifications,")
    print("hunter rankings, achievements, and skill progression!")

async def main():
    """Main initialization function"""
    success = await initialize_all_systems()
    
    if success:
        integration_success = await test_system_integration()
        
        if integration_success:
            await display_next_steps()
            print("\nüéâ PHASE 1 IMPLEMENTATION COMPLETE!")
            print("Your Solo Leveling bot now has authentic System features!")
        else:
            print("\n‚ö†Ô∏è Systems initialized but integration tests failed.")
            print("Check the error messages above and fix any issues.")
    else:
        print("\n‚ùå INITIALIZATION FAILED!")
        print("Please check the error messages and try again.")

if __name__ == "__main__":
    asyncio.run(main())
