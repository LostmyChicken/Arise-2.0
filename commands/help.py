import discord
from discord.ext import commands
from discord import ui

class HelpView(ui.View):
    def __init__(self, ctx, embeds):
        super().__init__(timeout=120)
        self.ctx = ctx
        self.embeds = embeds
        self.current_page = 0
        
        # Disable previous button on first page
        self.children[0].disabled = True
        # Disable next button if only one page
        if len(self.embeds) <= 1:
            self.children[1].disabled = True

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.ctx.author.id:
            await interaction.response.send_message("You cannot control this help menu.", ephemeral=True)
            return False
        return True

    async def update_embed(self, interaction: discord.Interaction):
        # Enable/disable buttons based on the current page
        self.children[0].disabled = self.current_page == 0
        self.children[1].disabled = self.current_page >= len(self.embeds) - 1
        
        # Update the footer to show the current page
        self.embeds[self.current_page].set_footer(text=f"Page {self.current_page + 1}/{len(self.embeds)} | Requested by {self.ctx.author.display_name}", icon_url=self.ctx.author.display_avatar.url)
        
        await interaction.response.edit_message(embed=self.embeds[self.current_page], view=self)

    @ui.button(label="Previous", style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: ui.Button):
        self.current_page -= 1
        await self.update_embed(interaction)

    @ui.button(label="Next", style=discord.ButtonStyle.primary)
    async def next_button(self, interaction: discord.Interaction, button: ui.Button):
        self.current_page += 1
        await self.update_embed(interaction)

class Help(commands.Cog):
    """The help command"""
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.bot.remove_command('help')

    @commands.hybrid_command(name="help", description="Shows a list of all available commands.")
    async def help(self, ctx: commands.Context):
        """Shows a list of all available commands."""
        # Organize commands by custom categories
        command_categories = {
            "üë§ Player & Profile": ["start", "profile", "stats", "inventory", "team", "equip", "afk"],
            "‚öîÔ∏è Combat & Battles": ["fight", "arena", "dungeonui", "gates", "skills", "system"],
            "üé≤ Gacha & Items": ["pull", "gacha", "upgrade", "sacrifice", "oshi", "redeem"],
            "üè∞ Guild & Social": ["guild", "leaderboard", "lb", "vote"],
            "üí∞ Economy & Trading": ["daily", "shop", "trade", "market", "boost"],
            "üìñ Story & Quests": ["story", "trivia", "train", "missions", "tutorial", "cooldowns"],
            "üîî Notifications & Settings": ["notifications", "timezone"],
            "üåç World Boss & Raids": ["raid", "worldboss"],
            "üîß Utility & Help": ["help", "fixuser", "unstuck", "ping", "changelog", "view"],
            "üëë Admin Commands": ["adminhelp", "give", "create", "fix", "resetstory", "channelcommands"]
        }

        embeds = []
        
        # Create the main landing page for the help menu
        main_embed = discord.Embed(
            title="üåü **ARISE HELP DESK** üåü",
            description=(
                "Welcome to the **Complete Solo Leveling Experience**!\n"
                "Navigate through command categories using the buttons below.\n\n"
                "**üîß Command Usage**: Every command works with **both** prefixes:\n"
                "‚Ä¢ **Slash Commands**: `/help`, `/profile`, `/guild`, etc.\n"
                "‚Ä¢ **Text Commands**: `sl help`, `sl profile`, `sl guild`, etc.\n\n"
                "**üÜï NEW FEATURES**:\n"
                "‚Ä¢ **Complete Solo Leveling Story** - Experience Jin-Woo's journey!\n"
                "‚Ä¢ **World Boss System** - Cross-server epic battles!\n"
                "‚Ä¢ **Smart Notifications** - Personalized alerts & timezone support!\n"
                "‚Ä¢ **Enhanced Guild System** - Complete guild management!\n\n"
                "**üí° Tip**: Type `/` in chat to see all available slash commands with descriptions!"
            ),
            color=discord.Color.gold()
        )
        main_embed.set_thumbnail(url=self.bot.user.display_avatar.url)

        # Add new features section
        main_embed.add_field(
            name="üÜï **Latest Features**",
            value=(
                "‚Ä¢ **Interactive Story System** - Full Solo Leveling campaign with dialogue choices and real-time battles\n"
                "‚Ä¢ **Enhanced Guild System** - Vice Masters, guild bank, applications, and role management\n"
                "‚Ä¢ **World Boss System** - Epic battles across servers with raid-style UI\n"
                "‚Ä¢ **Complete Upgrade Tracking** - All hunters, weapons, and shadows with material validation\n"
                "‚Ä¢ **Fixed Skill System** - Learn skills with proper effect descriptions\n"
                "‚Ä¢ **Improved Error Handling** - Self-repair commands and better stability\n"
                "‚Ä¢ **Modern UI Systems** - Interactive buttons for all major features"
            ),
            inline=False
        )

        # Add quick start guide
        main_embed.add_field(
            name="üöÄ **Quick Start Guide**",
            value=(
                "**New Players**: `sl start` ‚Üí `sl tutorial` ‚Üí `sl pull` ‚Üí `sl story`\n"
                "**Complete Story**: `sl story` ‚Ä¢ Experience Jin-Woo's journey from E-rank to Shadow Monarch\n"
                "**World Bosses**: Automatic spawns ‚Ä¢ Join epic cross-server battles\n"
                "**Notifications**: `sl notifications` ‚Ä¢ `sl timezone` ‚Ä¢ Personalized alerts\n"
                "**Enhanced UI**: `sl guild` ‚Ä¢ `sl dungeonui` ‚Ä¢ `sl gates` ‚Ä¢ `sl lb`\n"
                "**Core Systems**: `sl profile` ‚Ä¢ `sl team` ‚Ä¢ `sl stats` ‚Ä¢ `sl upgrade`"
            ),
            inline=False
        )

        # Add UI commands section
        main_embed.add_field(
            name="üéÆ **Major Features**",
            value=(
                "`sl story` - **Complete Solo Leveling Story** (13 arcs, 10 bosses)\n"
                "`sl notifications` - **Smart Notification System** with timezone support\n"
                "`sl guild` - **Enhanced Guild System** with roles, bank & applications\n"
                "`sl gates` - **Enhanced Gate System** with stamina & movement\n"
                "`sl cooldowns` - **Enhanced Cooldowns** with notification alerts\n"
                "`sl timezone` - **Personal Timezone** settings for display"
            ),
            inline=True
        )

        # Add world boss section
        main_embed.add_field(
            name="üåç **World Boss System**",
            value=(
                "**Automatic Spawning** - Every 2-7 hours across servers\n"
                "**Cross-Server Battles** - Join from any server\n"
                "**Shadow Bosses** - Igris, Iron, Tusk, Beru & more\n"
                "**Smart Scaling** - Difficulty scales with players\n"
                "**Damage Rewards** - Fair loot for 1%+ damage\n"
                "**Notifications** - Get alerted when bosses spawn"
            ),
            inline=True
        )

        # Add admin commands section (if user is admin)
        from utilis.admin import is_bot_admin
        if is_bot_admin(ctx.author.id):
            main_embed.add_field(
                name="üëë **Admin Access**",
                value="`sl adminhelp` - Comprehensive admin command center",
                inline=True
            )

        invite_url = discord.utils.oauth_url(self.bot.user.id, permissions=discord.Permissions(8))
        support_server_url = "https://discord.gg/ariseigris"
        vote_url = "https://top.gg/bot/1231157738629890118/vote"

        main_embed.add_field(
            name="üîó **Quick Links**",
            value=f"[Invite Bot]({invite_url}) | [Support Server]({support_server_url}) | [Vote for Us]({vote_url})",
            inline=False
        )

        main_embed.add_field(
            name="üÜò **Need Help?**",
            value=(
                "**Account Issues?** Use `sl fixuser` for comprehensive repair!\n"
                "**Stuck in Command?** Use `sl unstuck` for quick fixes!\n"
                "**Cooldown Problems?** Fixed automatically with better error handling!\n"
                "**Skill Errors?** All skill system bugs have been resolved!\n"
                "**More Help?** Join our support server for assistance."
            ),
            inline=False
        )

        main_embed.set_footer(text="Use the navigation buttons to explore command categories")
        embeds.append(main_embed)

        # Create a separate page for each category
        for category_name, command_names in command_categories.items():
            embed = discord.Embed(
                title=f"{category_name}",
                description=f"Detailed command information for {category_name.lower()}",
                color=discord.Color.random()
            )

            for cmd_name in command_names:
                command = self.bot.get_command(cmd_name)
                if not command:
                    continue

                # Get command parameters
                params = []
                for param_name, param in command.params.items():
                    if param_name not in ('self', 'ctx'):
                        if param.default == param.empty:
                            params.append(f"<{param_name}>")
                        else:
                            params.append(f"[{param_name}]")

                param_str = " ".join(params)

                # Create both command formats
                slash_cmd = f"/{command.name} {param_str}".strip()
                text_cmd = f"sl {command.name} {param_str}".strip()

                signature = f"**Slash**: `{slash_cmd}`\n**Text**: `{text_cmd}`"

                # Add aliases if they exist
                if command.aliases:
                    aliases = ", ".join([f"`sl {alias}`" for alias in command.aliases])
                    signature += f"\n**Aliases**: {aliases}"

                description = command.help or "No description provided."

                # Add detailed usage examples and instructions
                detailed_usage = {
                    "start": "**Begin your adventure!**\nCreates your player profile and gives you starting resources. Use this first!",
                    "profile": "**View player profiles**\n‚Ä¢ `/profile` - View your own profile\n‚Ä¢ `/profile @user` - View another player's profile\nShows level, stats, equipped items, and achievements.",
                    "story": "**Complete Solo Leveling Story Campaign**\n‚Ä¢ `/story` - Experience Jin-Woo's complete journey\n‚Ä¢ 13 interactive story arcs from E-rank to Shadow Monarch\n‚Ä¢ 10 epic boss battles with real combat mechanics\n‚Ä¢ 78 meaningful choices that shape character development\n‚Ä¢ Unlock new bot features as you progress through the story",
                    "notifications": "**Smart Notification System**\n‚Ä¢ `/notifications` - Complete notification management center\n‚Ä¢ Set up world boss alerts with server and rarity filtering\n‚Ä¢ Create custom notifications with scheduling\n‚Ä¢ Manage quiet hours and delivery preferences\n‚Ä¢ Visual server selection with toggle buttons",
                    "timezone": "**Personal Timezone Settings**\n‚Ä¢ `/timezone` - View your current timezone\n‚Ä¢ `/timezone -5` - Set timezone to EST (UTC-5)\n‚Ä¢ `/timezone +1` - Set timezone to CET (UTC+1)\n‚Ä¢ Affects display times only, game mechanics stay UTC\n‚Ä¢ Shows cooldown ready times in your local time",
                    "guild": "**Enhanced guild management**\n‚Ä¢ `/guild` - Open interactive guild interface\n‚Ä¢ Manage roles (Guild Master, Vice Master, Officer, Member)\n‚Ä¢ Access guild bank for shared resources\n‚Ä¢ Handle applications and member management\n‚Ä¢ Form alliances with other guilds",
                    "pull": "**Gacha system for hunters & weapons**\n‚Ä¢ `/pull` - Open interactive pull interface\n‚Ä¢ Use tickets to summon new hunters and weapons\n‚Ä¢ Set oshi (favorites) to increase pull rates\n‚Ä¢ Sacrifice unwanted items for resources",
                    "team": "**Manage your hunter party**\n‚Ä¢ `/team` - View and edit your active team\n‚Ä¢ Equip hunters to different positions\n‚Ä¢ Optimize team composition for battles",
                    "dungeonui": "**Interactive dungeon battles**\n‚Ä¢ `/dungeonui` - Enter modern dungeon interface\n‚Ä¢ Choose difficulty and battle through floors\n‚Ä¢ Earn rewards and experience\n‚Ä¢ Enhanced UI with skill usage",
                    "gates": "**Enhanced Gate System**\n‚Ä¢ `/gates` - Open gate selection interface with stamina system\n‚Ä¢ Instant movement without confirmation dialogs\n‚Ä¢ Stamina system: sprint/run depletes stamina, walk to regenerate\n‚Ä¢ Monsters move every 8 seconds except defeated ones\n‚Ä¢ Permanent monster defeats - no re-fighting same enemies\n‚Ä¢ Hidden boss rooms with dramatic discovery system",
                    "cooldowns": "**Enhanced Cooldown System**\n‚Ä¢ `/cooldowns` - View all command cooldowns with 'Set Alerts' button\n‚Ä¢ Timezone-aware display shows ready times in your local time\n‚Ä¢ One-click notification setup for when commands are ready\n‚Ä¢ Smart detection of active cooldowns only\n‚Ä¢ Integration with notification system",
                    "arena": "**PvP battles against players**\n‚Ä¢ `/arena` - Enter arena combat\n‚Ä¢ Fight other players for ranking points\n‚Ä¢ Climb leaderboards and earn rewards\n‚Ä¢ Strategic combat with your best team",
                    "fight": "**Quick random battles**\n‚Ä¢ `/fight` - Battle random opponents\n‚Ä¢ Fast combat for experience and gold\n‚Ä¢ Good for training and quick rewards",
                    "daily": "**Daily quest rewards**\n‚Ä¢ `/daily` - Claim daily rewards\n‚Ä¢ Complete objectives for bonus rewards\n‚Ä¢ Resets every 24 hours",
                    "skills": "**Skill tree system**\n‚Ä¢ `/skills` - Open skill learning interface\n‚Ä¢ Learn new abilities using skill points\n‚Ä¢ Upgrade existing skills for better effects\n‚Ä¢ Choose from different skill trees",
                    "upgrade": "**Item upgrade tracking**\n‚Ä¢ `/upgrade` - View all upgradeable items\n‚Ä¢ See material requirements for upgrades\n‚Ä¢ Track hunters, weapons, and shadows\n‚Ä¢ Smart sorting by upgrade availability",
                    "inventory": "**Browse your collection**\n‚Ä¢ `/inventory` - View all your items\n‚Ä¢ Filter by type (hunters, weapons, items)\n‚Ä¢ Check item details and stats",
                    "stats": "**Detailed player statistics**\n‚Ä¢ `/stats` - View comprehensive stats\n‚Ä¢ See rankings and achievements\n‚Ä¢ Track progress and improvements",
                    "cooldowns": "**Command cooldown tracker**\n‚Ä¢ `/cooldowns` - View all command cooldowns\n‚Ä¢ See remaining time for each command\n‚Ä¢ Premium users get reduced cooldowns",
                    "fixuser": "**Comprehensive account repair**\n‚Ä¢ `/fixuser` - Fix common account issues\n‚Ä¢ Resets stuck command states\n‚Ä¢ Repairs corrupted cooldown data\n‚Ä¢ Safe and automatic fixes",
                    "unstuck": "**Quick stuck state fix**\n‚Ä¢ `/unstuck` - Fast fix for stuck commands\n‚Ä¢ Clears 'in command' status\n‚Ä¢ Use when commands won't work",
                    "leaderboard": "**Player rankings**\n‚Ä¢ `/leaderboard` or `/lb` - Interactive leaderboards\n‚Ä¢ View top players by different categories\n‚Ä¢ Compare your progress with others",
                    "lb": "**Interactive leaderboards**\n‚Ä¢ `/lb` - Modern leaderboard interface\n‚Ä¢ Multiple ranking categories\n‚Ä¢ Real-time player comparisons"
                }

                if command.name in detailed_usage:
                    description = detailed_usage[command.name]

                embed.add_field(name=f"**{command.name.upper()}**", value=f"{signature}\n\n{description}", inline=False)
            
            embeds.append(embed)

        # Set the footer for the first page
        embeds[0].set_footer(text=f"Page 1/{len(embeds)} | Requested by {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)

        view = HelpView(ctx, embeds)
        await ctx.send(embed=embeds[0], view=view, ephemeral=True)

async def setup(bot):
    await bot.add_cog(Help(bot))
