{"ast":null,"code":"var _jsxFileName = \"/workspace/Arise-2.0/web-game/frontend/src/hooks/useSocket.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './useAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(undefined);\nexport function SocketProvider({\n  children\n}) {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (user) {\n      // Connect to Socket.IO server\n      const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:56092', {\n        auth: {\n          token: user.access_token,\n          player_id: user.player_id\n        }\n      });\n      newSocket.on('connect', () => {\n        console.log('ðŸ”Œ Connected to game server');\n        setConnected(true);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('ðŸ”Œ Disconnected from game server');\n        setConnected(false);\n      });\n      newSocket.on('connected', data => {\n        console.log('Welcome message:', data.message);\n      });\n\n      // Battle events\n      newSocket.on('battle_update', data => {\n        console.log('Battle update:', data);\n        // Handle battle updates\n        window.dispatchEvent(new CustomEvent('battle_update', {\n          detail: data\n        }));\n      });\n\n      // World boss events\n      newSocket.on('world_boss_update', data => {\n        console.log('World boss update:', data);\n        // Handle world boss updates\n        window.dispatchEvent(new CustomEvent('world_boss_update', {\n          detail: data\n        }));\n      });\n\n      // Guild events\n      newSocket.on('guild_update', data => {\n        console.log('Guild update:', data);\n        // Handle guild updates\n        window.dispatchEvent(new CustomEvent('guild_update', {\n          detail: data\n        }));\n      });\n      setSocket(newSocket);\n      return () => {\n        newSocket.close();\n      };\n    }\n  }, [user]);\n  const joinRoom = room => {\n    if (socket) {\n      socket.emit('join_room', {\n        room\n      });\n    }\n  };\n  const leaveRoom = room => {\n    if (socket) {\n      socket.emit('leave_room', {\n        room\n      });\n    }\n  };\n  const value = {\n    socket,\n    connected,\n    joinRoom,\n    leaveRoom\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(SocketProvider, \"OKPP+mnOeJfwAAivly0/xMlqf4U=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport function useSocket() {\n  _s2();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n}\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","undefined","SocketProvider","children","_s","socket","setSocket","connected","setConnected","user","newSocket","process","env","REACT_APP_API_URL","auth","token","access_token","player_id","on","console","log","data","message","window","dispatchEvent","CustomEvent","detail","close","joinRoom","room","emit","leaveRoom","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/workspace/Arise-2.0/web-game/frontend/src/hooks/useSocket.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { useAuth } from './useAuth';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  connected: boolean;\n  joinRoom: (room: string) => void;\n  leaveRoom: (room: string) => void;\n}\n\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\nexport function SocketProvider({ children }: { children: ReactNode }) {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [connected, setConnected] = useState(false);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      // Connect to Socket.IO server\n      const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:56092', {\n        auth: {\n          token: user.access_token,\n          player_id: user.player_id\n        }\n      });\n\n      newSocket.on('connect', () => {\n        console.log('ðŸ”Œ Connected to game server');\n        setConnected(true);\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('ðŸ”Œ Disconnected from game server');\n        setConnected(false);\n      });\n\n      newSocket.on('connected', (data) => {\n        console.log('Welcome message:', data.message);\n      });\n\n      // Battle events\n      newSocket.on('battle_update', (data) => {\n        console.log('Battle update:', data);\n        // Handle battle updates\n        window.dispatchEvent(new CustomEvent('battle_update', { detail: data }));\n      });\n\n      // World boss events\n      newSocket.on('world_boss_update', (data) => {\n        console.log('World boss update:', data);\n        // Handle world boss updates\n        window.dispatchEvent(new CustomEvent('world_boss_update', { detail: data }));\n      });\n\n      // Guild events\n      newSocket.on('guild_update', (data) => {\n        console.log('Guild update:', data);\n        // Handle guild updates\n        window.dispatchEvent(new CustomEvent('guild_update', { detail: data }));\n      });\n\n      setSocket(newSocket);\n\n      return () => {\n        newSocket.close();\n      };\n    }\n  }, [user]);\n\n  const joinRoom = (room: string) => {\n    if (socket) {\n      socket.emit('join_room', { room });\n    }\n  };\n\n  const leaveRoom = (room: string) => {\n    if (socket) {\n      socket.emit('leave_room', { room });\n    }\n  };\n\n  const value = {\n    socket,\n    connected,\n    joinRoom,\n    leaveRoom\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n}\n\nexport function useSocket() {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}